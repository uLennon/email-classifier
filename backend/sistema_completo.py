import re
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer, WordNetLemmatizer
from nltk.tokenize import word_tokenize
import PyPDF2
import random


# Download recursos NLTK
try:
    nltk.download('punkt')
    nltk.download('stopwords')
    nltk.download('wordnet')
    nltk.download('punkt_tab')
except:
    print("‚ö†Ô∏è Recursos NLTK j√° baixados")

class ProcessadorTexto:
    def __init__(self):
        self.stemmer = PorterStemmer()
        self.lemmatizer = WordNetLemmatizer()
        self.stop_words_pt = set(stopwords.words('portuguese'))
        self.stop_words_en = set(stopwords.words('english'))
        self.stop_words = self.stop_words_pt.union(self.stop_words_en)
        print("üîß Processador de Texto inicializado")
    
    def extrair_texto_pdf(self, arquivo_pdf):
        """
        Extrai texto de arquivos PDF
        """
        print("üìÑ Extraindo texto do PDF...")
        try:
            pdf_reader = PyPDF2.PdfReader(arquivo_pdf)
            texto = ""
            for pagina in pdf_reader.pages:
                texto += pagina.extract_text() + "\n"
            print(f"‚úÖ PDF processado: {len(texto)} caracteres")
            return texto
        except Exception as e:
            print(f"‚ùå Erro ao extrair PDF: {e}")
            return ""
    
    def preprocessar_texto(self, texto):
        """
        Pr√©-processamento completo do texto
        """
        print("üîÑ Pr√©-processando texto...")
        
        # 1. Convers√£o para min√∫sculo
        texto = texto.lower()
        
        # 2. Remo√ß√£o de caracteres especiais, n√∫meros e URLs
        texto = re.sub(r'http\S+', '', texto)  # Remove URLs
        texto = re.sub(r'[^a-zA-Z√Ä-√ø\s]', ' ', texto)  # Mant√©m apenas letras e espa√ßos
        texto = re.sub(r'\s+', ' ', texto)  # Remove m√∫ltiplos espa√ßos
        
        # 3. Tokeniza√ß√£o
        tokens = word_tokenize(texto, language='portuguese')
        print(f"   ‚úÖ Tokeniza√ß√£o: {len(tokens)} tokens")
        
        # 4. Remo√ß√£o de stop words
        tokens_sem_stopwords = [token for token in tokens if token not in self.stop_words and len(token) > 2]
        print(f"   ‚úÖ Stop words removidas: {len(tokens_sem_stopwords)} tokens")
        
        # 5. Lemmatization
        tokens_lemmatized = [self.lemmatizer.lemmatize(token) for token in tokens_sem_stopwords]
        print(f"   ‚úÖ Lemmatization aplicada")
        
        # 6. Reconstru√ß√£o do texto
        texto_processado = ' '.join(tokens_lemmatized)
        print(f"   üìä Texto processado: {texto_processado[:100]}...")
        
        return texto_processado

class ClassificadorNaiveBayes:
    def __init__(self):
        self.modelo = None
        self.vectorizer = None
        self._treinar_modelo()
        print("üéØ Classificador Naive Bayes inicializado")
    
    def _criar_dataset_treinamento(self):
        """
        Cria dataset de treinamento para emails em portugu√™s
        """
        # Emails produtivos (requerem a√ß√£o)
        emails_produtivos = [
            "preciso de ajuda com erro no sistema",
            "solicito suporte t√©cnico urgente",
            "problema com acesso √† plataforma",
            "n√£o consigo fazer login na conta",
            "erro ao processar pagamento",
            "sistema apresenta falha cr√≠tica",
            "necessito assist√™ncia com software",
            "relat√≥rio n√£o est√° gerando",
            "d√∫vida sobre funcionalidade do produto",
            "como configurar nova conta",
            "problema de conectividade com servidor",
            "atualiza√ß√£o quebrou funcionalidade",
            "bug na interface do usu√°rio",
            "solicita√ß√£o de novo recurso",
            "problema de performance no sistema",
            "erro na importa√ß√£o de dados",
            "backup n√£o est√° funcionando",
            "relat√≥rio com dados incorretos",
            "sistema lento para carregar",
            "integra√ß√£o com API falhando",
            "problema de seguran√ßa detectado",
            "dados corrompidos no banco",
            "funcionalidade n√£o responde",
            "erro cr√≠tico na aplica√ß√£o",
            "suporte necess√°rio para implanta√ß√£o"
        ]
        
        # Emails improdutivos (cumprimentos, agradecimentos)
        emails_improdutivos = [
            "obrigado pela ajuda",
            "parab√©ns pelo excelente trabalho",
            "feliz natal e ano novo",
            "agrade√ßo o suporte da equipe",
            "cumprimentos √† diretoria",
            "excelente atendimento ao cliente",
            "felicita√ß√µes pelo anivers√°rio",
            "bom trabalho da equipe t√©cnica",
            "agradecimento pelo servi√ßo prestado",
            "sauda√ß√µes cordiais a todos",
            "reconhecimento pelo empenho",
            "feliz ano novo prospero",
            "boas festas de final de ano",
            "parab√©ns pelo projeto conclu√≠do",
            "agradecimento pela parceria",
            "felicidades para a empresa",
            "cumprimentos de boa tarde",
            "reconhecimento do bom trabalho",
            "agrade√ßo a aten√ß√£o dispensada",
            "feliz p√°scoa para todos",
            "parab√©ns pelo anivers√°rio da empresa",
            "sauda√ß√µes aos colegas de trabalho",
            "agradecimento pelo r√°pido retorno",
            "feliz dia dos namorados",
            "cumprimentos de bom dia"
        ]
        
        textos = emails_produtivos + emails_improdutivos
        labels = [1] * len(emails_produtivos) + [0] * len(emails_improdutivos)  # 1=Produtivo, 0=Improdutivo
        
        return textos, labels
    
    def _treinar_modelo(self):
        """
        Treina o modelo Naive Bayes
        """
        print("ü§ñ Treinando modelo Naive Bayes...")
        
        # Cria dataset de treinamento
        textos, labels = self._criar_dataset_treinamento()
        
        # Cria pipeline de processamento
        self.modelo = Pipeline([
            ('vectorizer', CountVectorizer(ngram_range=(1, 2), max_features=1000)),
            ('classifier', MultinomialNB())
        ])
        
        # Treina o modelo
        self.modelo.fit(textos, labels)
        print("‚úÖ Modelo treinado com sucesso!")
    
    def classificar(self, texto):
        """
        Classifica texto usando Naive Bayes
        """
        try:
            probabilidades = self.modelo.predict_proba([texto])[0]
            predicao = self.modelo.predict([texto])[0]
            confianca = max(probabilidades)
            
            print(f"üéØ Naive Bayes - Predi√ß√£o: {'Produtivo' if predicao == 1 else 'Improdutivo'}")
            print(f"üéØ Confian√ßa: {confianca:.3f}")
            
            if confianca > 0.6:  # Confian√ßa m√≠nima
                return "Produtivo" if predicao == 1 else "Improdutivo"
            else:
                return self._classificacao_fallback(texto)
                
        except Exception as e:
            print(f"‚ùå Erro Naive Bayes: {e}")
            return self._classificacao_fallback(texto)
    
    def _classificacao_fallback(self, texto):
        """
        Fallback baseado em palavras-chave
        """
        texto_lower = texto.lower()
        
        palavras_produtivas = [
            'problema', 'erro', 'bug', 'falha', 'ajuda', 'suporte', 'urgente',
            'solicita√ß√£o', 'n√£o funciona', 'n√£o consigo', 'preciso de ajuda',
            'como fazer', 'd√∫vida', 'quest√£o', 'pagamento', 'fatura', 'contrato'
        ]
        
        palavras_improdutivas = [
            'obrigado', 'parab√©ns', 'feliz natal', 'ano novo', 'boas festas',
            'agradecimento', 'cumprimentos', 'excelente trabalho', 'felicita√ß√µes'
        ]
        
        score_produtivo = sum(1 for palavra in palavras_produtivas if palavra in texto_lower)
        score_improdutivo = sum(1 for palavra in palavras_improdutivas if palavra in texto_lower)
        
        print(f"üéØ Fallback - Produtivo: {score_produtivo}, Improdutivo: {score_improdutivo}")
        
        return "Produtivo" if score_produtivo > score_improdutivo else "Improdutivo"

class GeradorRespostas:
    def __init__(self):
        self.respostas_produtivo = [
            "Agradecemos seu contato sobre a quest√£o relatada. Nossa equipe analisar√° sua solicita√ß√£o e retornar√° em at√© 24 horas √∫teis com uma solu√ß√£o.",
            "Recebemos sua solicita√ß√£o. Nossa equipe t√©cnica est√° analisando o caso e retornar√° com um posicionamento em breve.",
            "Obrigado pelo seu email. Estamos revisando as informa√ß√µes fornecidas e retornaremos com uma resposta completa em at√© 48 horas.",
            "Agradecemos a mensagem sobre o problema relatado. Nossa equipe de suporte j√° foi acionada e entrar√° em contato em at√© 2 horas √∫teis.",
            "Confirmamos o recebimento de sua solicita√ß√£o. Nossa equipe especializada est√° trabalhando na an√°lise e retornar√° em breve.",
            "Recebemos seu relato sobre a dificuldade encontrada. Nossos t√©cnicos est√£o investigando a quest√£o e fornecer√£o uma atualiza√ß√£o em at√© 4 horas.",
            "Agradecemos seu contato sobre esta demanda. Nossa equipe est√° analisando os detalhes e retornar√° com orienta√ß√µes espec√≠ficas.",
            "Obrigado por reportar esta quest√£o. Nossa equipe est√° verificando as informa√ß√µes e retornar√° com um plano de a√ß√£o.",
            "Confirmamos o recebimento de sua requisi√ß√£o. Nossa equipe est√° avaliando a melhor forma de atend√™-lo e retornar√° em breve.",
            "Agradecemos a comunica√ß√£o sobre este assunto. Nossa equipe est√° analisando o caso e retornar√° com uma proposta de solu√ß√£o."
        ]
        
        self.respostas_improdutivo = [
            "Agradecemos sua mensagem e os cumprimentos! Ficamos contentes com o contato e permanecemos √† disposi√ß√£o.",
            "Muito obrigado pelo reconhecimento! Ficamos felizes em saber que nosso trabalho est√° fazendo a diferen√ßa.",
            "Agradecemos profundamente os votos de felicidades! Desejamos a voc√™ e sua equipe todo sucesso!",
            "Obrigado pela mensagem de apre√ßo! √â um prazer poder contribuir com seu sucesso.",
            "Agradecemos os cumprimentos! Estamos sempre dispon√≠veis para novos desafios e colabora√ß√µes.",
            "Muito obrigado pelo feedback positivo! Sua motiva√ß√£o nos inspira a continuar melhorando.",
            "Agradecemos sua mensagem cordial! Ficamos honrados com o contato e seguimos √† disposi√ß√£o.",
            "Obrigado pelas gentis palavras! √â gratificante saber que nosso trabalho √© valorizado.",
            "Agradecemos a mensagem de cortesia! Estamos sempre empenhados em oferecer o melhor servi√ßo.",
            "Muito obrigado pelo carinho! Continuamos trabalhando para merecer sua confian√ßa."
        ]
        
        self.respostas_contextuais = {
            "Produtivo": {
                "tecnico": [
                    "üîß **Resposta T√©cnica**\n\nIdentificamos uma quest√£o t√©cnica em sua mensagem. Nossa equipe de suporte j√° foi acionada e entrar√° em contato em at√© 2 horas √∫teis para diagn√≥stico e resolu√ß√£o.",
                    "‚öôÔ∏è **Suporte T√©cnico**\n\nDetectamos um problema t√©cnico em sua solicita√ß√£o. Nossos engenheiros est√£o analisando o caso e retornar√£o com uma solu√ß√£o em at√© 4 horas."
                ],
                "financeiro": [
                    "üí∞ **Resposta Financeira**\n\nAnalisamos sua solicita√ß√£o financeira. Nossa equipe especializada revisar√° o caso e retornar√° com informa√ß√µes detalhadas em at√© 24 horas √∫teis.",
                    "üí≥ **Atendimento Financeiro**\n\nRecebemos sua quest√£o sobre aspectos financeiros. Nossa equipe cont√°bil est√° verificando as informa√ß√µes e entrar√° em contato em at√© 48 horas."
                ],
                "comercial": [
                    "üìã **Resposta Comercial**\n\nAgradecemos seu contato sobre aspectos comerciais. Nossa equipe revisar√° sua solicita√ß√£o e retornar√° com as informa√ß√µes solicitadas em breve.",
                    "ü§ù **Atendimento Comercial**\n\nRecebemos sua mensagem comercial. Nossa equipe de neg√≥cios analisar√° sua demanda e retornar√° com uma proposta adequada."
                ]
            },
            "Improdutivo": {
                "festividades": [
                    "üéÑ **Resposta de Festividades**\n\nAgradecemos profundamente os votos de felicidades! Desejamos a voc√™, sua equipe e familiares um excelente final de ano repleto de alegria!",
                    "‚≠ê **Cumprimentos Festivos**\n\nMuito obrigado pelas felicita√ß√µes! Retribu√≠mos os votos de um pr√≥spero ano novo cheio de conquistas!"
                ],
                "reconhecimento": [
                    "üèÜ **Resposta de Reconhecimento**\n\nMuito obrigado pelo generoso reconhecimento! Ficamos verdadeiramente felizes em saber que nosso trabalho est√° fazendo a diferen√ßa.",
                    "üëç **Agradecimento por Feedback**\n\nAgradecemos seu feedback positivo! Sua motiva√ß√£o nos inspira a continuar melhorando constantemente."
                ],
                "cortesia": [
                    "üíå **Resposta de Cortesia**\n\nAgradecemos sua mensagem! Ficamos contentes com o contato e permanecemos √† disposi√ß√£o para qualquer assunto profissional.",
                    "üôè **Resposta de Agradecimento**\n\nObrigado pela mensagem de apre√ßo! Estamos sempre dispon√≠veis para auxiliar em assuntos profissionais futuros."
                ]
            }
        }
        print("üí¨ Gerador de Respostas inicializado")
    
    def gerar_resposta(self, texto, categoria):
        """
        Gera resposta baseada na categoria e contexto
        """
        texto_lower = texto.lower()
        
        # Resposta contextual baseada no conte√∫do
        if categoria == "Produtivo":
            if any(palavra in texto_lower for palavra in ['erro', 'bug', 'problema', 'n√£o funciona']):
                return random.choice(self.respostas_contextuais["Produtivo"]["tecnico"])
            elif any(palavra in texto_lower for palavra in ['pagamento', 'fatura', 'cobran√ßa', 'financeiro']):
                return random.choice(self.respostas_contextuais["Produtivo"]["financeiro"])
            elif any(palavra in texto_lower for palavra in ['contrato', 'projeto', 'proposta', 'comercial']):
                return random.choice(self.respostas_contextuais["Produtivo"]["comercial"])
            else:
                return random.choice(self.respostas_produtivo)
        else:
            if any(palavra in texto_lower for palavra in ['natal', 'ano novo', 'boas festas']):
                return random.choice(self.respostas_contextuais["Improdutivo"]["festividades"])
            elif any(palavra in texto_lower for palavra in ['parab√©ns', 'excelente', '√≥timo trabalho']):
                return random.choice(self.respostas_contextuais["Improdutivo"]["reconhecimento"])
            else:
                return random.choice(self.respostas_improdutivo)

class SistemaEmail:
    def __init__(self):
        self.processador = ProcessadorTexto()
        self.classificador = ClassificadorNaiveBayes()
        self.gerador = GeradorRespostas()
        print("üöÄ SISTEMA DE EMAIL INICIALIZADO")
        print("=" * 60)
    
    def processar_entrada(self, arquivo=None, texto=None):
        """
        Processa entrada (PDF ou texto)
        """
        if arquivo:
            # Processa arquivo PDF
            texto_original = self.processador.extrair_texto_pdf(arquivo)
            if not texto_original:
                return {"error": "N√£o foi poss√≠vel extrair texto do PDF"}
        elif texto:
            texto_original = texto
        else:
            return {"error": "Nenhuma entrada fornecida"}
        
        print(f"üì® TEXTO ORIGINAL: {texto_original[:100]}...")
        
        # Pr√©-processamento NLP
        texto_processado = self.processador.preprocessar_texto(texto_original)
        
        # Classifica√ß√£o com Naive Bayes
        categoria = self.classificador.classificar(texto_processado)
        print(f"üè∑Ô∏è CATEGORIA: {categoria}")
        
        # Gera√ß√£o de resposta
        resposta = self.gerador.gerar_resposta(texto_original, categoria)
        print(f"üí° RESPOSTA: {resposta}")
        
        return {
            'categoria': categoria,
            'resposta_sugerida': resposta,
            'texto_processado': texto_processado,
            'tamanho_original': len(texto_original),
            'status': 'success'
        }

# üß™ TESTE COMPLETO
def testar_sistema():
    print("üß™ TESTE DO SISTEMA")
    print("=" * 60)
    
    sistema = SistemaEmail()
    
    # Testes com texto
    testes_texto = [
        "Preciso de ajuda urgente com um erro cr√≠tico no sistema de pagamento que est√° impedindo o processamento de faturas.",
        "Parab√©ns pelo excelente trabalho no projeto! Desejo um feliz natal para toda a equipe!",
        "Como fa√ßo para solicitar um relat√≥rio detalhado de vendas do √∫ltimo trimestre?",
        "Obrigado pelo suporte r√°pido na resolu√ß√£o do problema t√©cnico da semana passada."
    ]
    
    for i, texto in enumerate(testes_texto, 1):
        print(f"\nüìä TESTE {i}/4 - TEXTO")
        print("-" * 40)
        
        resultado = sistema.processar_entrada(texto=texto)
        print(f"‚úÖ {resultado['categoria']}: {resultado['resposta_sugerida'][:80]}...")
        print("üéØ" + "="*50 + "üéØ")

if __name__ == "__main__":
    testar_sistema()